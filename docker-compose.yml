x-postgres-common:
  &postgres-common
  user: ${DB_USER}
  restart: always
  env_file:
    - .env

services:
  bot:
    image: bot_image
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: bot
    depends_on:
      - db
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env

  db:
    <<: *postgres-common
    image: db_image
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: db
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication repl_user 0.0.0.0/0 scram-sha-256"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
      -c log_directory=/var/log/pglog
      -c log_min_messages=NOTICE
      -c log_min_error_statement=ERROR
      -c log_min_duration_statement=100
      -c log_replication_commands=on
    env_file:
      - .env

  db_repl:
    <<: *postgres-common
    image: db_repl_image
    build:
      context: ./db_repl
      dockerfile: Dockerfile
    container_name: db_repl
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R -h db --slot=replication_slot
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - db
    env_file:
      - .env

networks:
  default:
    driver: bridge
